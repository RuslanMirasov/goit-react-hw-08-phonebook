{"version":3,"file":"static/js/846.310c173c.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Section/Section.module.css?dbe8","components/Section/Section.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Notification/Notification.module.css?a91f","components/Notification/Notification.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","redux/selectors.js","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","pages/Contacts.jsx","utils/formValidation.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__Z2PLw\",\"container\":\"Section_container__vEvWA\",\"sectionTitle\":\"Section_sectionTitle__in2ym\"};","import css from './Section.module.css';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <section className={css.section}>\n      <div className={css.container}>\n        {title && <h2 className={css.sectionTitle}>{title}</h2>}\n        {children}\n      </div>\n    </section>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"notification\":\"Notification_notification__SfISU\"};","import css from './Notification.module.css';\n\nexport const Notification = ({ message }) => {\n  return message && <p className={css.notification}>{message}</p>;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"labelText\":\"Filter_labelText__vRYcr\",\"input\":\"Filter_input__N7T3z\"};","export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getFilter = state => state.filter;\n","import css from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from 'redux/selectors';\nimport { filterContacts } from '../../redux/filterSlice';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  return (\n    <label className={css.label}>\n      <span className={css.labelText}>Find contacts by name</span>\n      <input\n        className={css.input}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        placeholder=\"Enter contact name\"\n        onChange={event => dispatch(filterContacts(event.target.value))}\n      />\n    </label>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contactListText\":\"ContactList_contactListText__SGTz9\",\"contactListHead\":\"ContactList_contactListHead__wuOQA\",\"delButton\":\"ContactList_delButton__8KTvB\"};","import css from './ContactList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport { deleteContact } from 'redux/operations';\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const filteredContacts = contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n  const dispatch = useDispatch();\n\n  return (\n    <ul className={css.contactList}>\n      <li className={css.contactListHead}>\n        <p className={css.contactListText}>Name</p>\n        <p className={css.contactListText}>Phone</p>\n      </li>\n      {filteredContacts.map(({ id, name, number }) => (\n        <li key={id}>\n          <p className={css.contactListText}>{name}</p>\n          <p className={css.contactListText}>{number}</p>\n          <button type=\"button\" className={css.delButton} onClick={() => dispatch(deleteContact(id))}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { getContacts } from 'redux/selectors';\nimport css from './ContactForm.module.css';\nimport { formValidation, inputClean } from 'utils/formValidation.js';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/operations';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    switch (event.target.name) {\n      case 'name':\n        setName(event.target.value);\n        break;\n      case 'number':\n        setNumber(event.target.value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (formValidation(event.currentTarget) === true) {\n      const newContactName = event.target.name.value;\n      if (contacts.find(contact => contact.name.toLowerCase() === newContactName.toLowerCase())) {\n        return alert(`Contact \"${newContactName}\" is already exists!`);\n      }\n      dispatch(addContact({ name, number, id: nanoid() }));\n      setName('');\n      setNumber('');\n    }\n  };\n\n  return (\n    <form className={css.contactForm} onSubmit={handleSubmit} noValidate>\n      <label className={css.label}>\n        <span className={css.labelText}>Name</span>\n        <input\n          className={css.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces.\"\n          required\n          placeholder=\"Enter your name\"\n          onFocus={input => inputClean(input.target)}\n          onChange={handleChange}\n        />\n      </label>\n      <label className={css.label}>\n        <span className={css.labelText}>Number</span>\n        <input\n          className={css.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"[0-9]+(([+() -]))*$\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          placeholder=\"Enter your phone number\"\n          onFocus={input => inputClean(input.target)}\n          onChange={handleChange}\n        />\n      </label>\n      <button className={css.submit}>Add contact</button>\n    </form>\n  );\n};\n","import { Section } from 'components/Section/Section';\nimport { Notification } from 'components/Notification/Notification';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport Loading from 'components/Loading/Loading';\n\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from '../redux/operations';\nimport { getContacts, getError, getIsLoading } from 'redux/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Section title=\"Add new contact:\">\n        <ContactForm />\n      </Section>\n\n      {error && (\n        <Section>\n          <Notification message={error}></Notification>\n        </Section>\n      )}\n\n      {!error && contacts.length === 0 && (\n        <Section>\n          <Notification message=\"There is no contacts in Phonebook!\"></Notification>\n        </Section>\n      )}\n\n      {contacts.length > 0 && (\n        <Section title=\"Contacts\">\n          <Filter />\n\n          {isLoading && <Loading />}\n          {!isLoading && <ContactList />}\n        </Section>\n      )}\n    </>\n  );\n};\n\nexport default Contacts;\n","export function formValidation(form) {\n  let checker = true;\n  form.querySelectorAll('[required]').forEach(required => {\n    const requiredLabel = required.closest('label');\n    if (required.value.length === 0) {\n      addErrorMarkup(requiredLabel, 'The field is empty!');\n    } else {\n      const inputPattern = required.pattern;\n      const errorText = required.title;\n      if (!new RegExp(inputPattern).test(required.value)) {\n        addErrorMarkup(requiredLabel, errorText);\n      }\n    }\n    //add error text to markup\n    function addErrorMarkup(correntLabel, text) {\n      const errors = correntLabel.querySelectorAll('.label__error').length;\n      if (errors < 1) {\n        correntLabel.insertAdjacentHTML('beforeend', `<span class=\"label__error\">${text}</span>`);\n      }\n      required.classList.add('red');\n      checker = false;\n    }\n  });\n  return checker;\n}\n\nexport function inputClean(input) {\n  const label = input.closest('label').querySelector('.label__error');\n  if (label) {\n    input.classList.remove('red');\n    label.remove();\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"label\":\"ContactForm_label__-cVXI\",\"labelText\":\"ContactForm_labelText__JB4h1\",\"input\":\"ContactForm_input__Bl93P\",\"submit\":\"ContactForm_submit__eYq7N\"};"],"names":["Section","title","children","className","css","Notification","message","getContacts","state","contacts","items","getIsLoading","isLoading","getError","error","getFilter","filter","Filter","useSelector","dispatch","useDispatch","type","name","value","placeholder","onChange","event","filterContacts","target","ContactList","filteredContacts","contact","toLowerCase","includes","map","id","number","onClick","deleteContact","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","ContactForm","useState","setName","setNumber","handleChange","onSubmit","preventDefault","formValidation","currentTarget","newContactName","find","alert","addContact","noValidate","pattern","required","onFocus","input","inputClean","useEffect","fetchContacts","length","Loading","form","checker","querySelectorAll","forEach","requiredLabel","closest","addErrorMarkup","inputPattern","errorText","RegExp","test","correntLabel","text","insertAdjacentHTML","classList","add","label","querySelector","remove"],"sourceRoot":""}